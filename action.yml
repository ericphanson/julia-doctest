name: 'julia-doctest'
description: 'Run doctests and make suggestions to fix them'
author: 'Eric P. Hanson and contributors'

branding:
  icon: 'package'
  color: 'green'

inputs:
  ### Required inputs
  package:
    description: 'Name of the package to run doctests for'
    required: true
  ### Optional inputs
  codecov-token:
    description: 'A CodeCov token if necessary'
    required: false
  julia-version:
    description: 'Version of Julia to use'
    required: false
    default: '1'
  fail_on_error:
    description: 'Whether or not to fail the check if the doctests fail'
    required: false
    default: 'true'
  filter_mode:
    description: 'Look at the diff (`diff_context`) and make suggestions, or look everywhere (`nofilter`) and make annotations.'
    required: false
    default: 'nofilter'
  
runs:
  using: 'composite'
  steps:
    - uses: julia-actions/setup-julia@latest
      with:
        version: ${{ inputs.julia-version }}
    - uses: actions/checkout@v2
    - name: Fix doctests
      shell: julia --code-coverage --project=docs {0}
      run: |
        ENV["GITHUB_EVENT_NAME"] == "pull_request" || error("""
        `julia-doctest` can only be run on pull requests! Use
        ```
        on: [pull_request]
        ```
        to only trigger your workflow on pull requests.
        """)
        using Pkg
        Pkg.develop(PackageSpec(path=pwd()))
        Pkg.instantiate()
        try
            using Documenter
        catch e
          rethrow(ErrorException("Documenter.jl was not found in the `docs` environment."))
        end
        using ${{ inputs.package }}
        DocMeta.setdocmeta!(${{ inputs.package }}, :DocTestSetup, :(using ${{ inputs.package }}); recursive=true)
        doctest(${{ inputs.package }}; fix=true)
    - uses: julia-actions/julia-processcoverage@v1
    - uses: codecov/codecov-action@v1
      with:
        file: lcov.info
        token: ${{ inputs.codecov-token }}
    - uses: reviewdog/action-suggester@v1
      with:
        tool_name: Documenter (doctests)
        fail_on_error: ${{ inputs.fail_on_error }}
        filter_mode: ${{ inputs.filter_mode }}
